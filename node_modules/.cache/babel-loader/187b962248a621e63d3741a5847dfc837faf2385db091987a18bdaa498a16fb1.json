{"ast":null,"code":"const Yelp = {\n  // The search method takes term, location, and sortBy as its parameters\n  async search(term, location, sortBy) {\n    // Build the URL using interpolation to include the term, location, and sortBy variables\n    const url = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\n    try {\n      // Make a fetch request to the Yelp API with the constructed URL and the API key in the headers\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${apiKey}`\n        }\n      });\n\n      // If the response is ok (HTTP status code is 200), proceed to process the response\n      if (response.ok) {\n        // Convert the response to a JSON object\n        const jsonResponse = await response.json();\n        // Check if the jsonResponse has a businesses property (an array of businesses)\n        if (jsonResponse.businesses) {\n          // Map the jsonResponse.businesses array to a new array with only the required properties\n          return jsonResponse.businesses.map(business => ({\n            id: business.id,\n            imageSrc: business.image_url,\n            name: business.name,\n            address: business.location.address1,\n            city: business.location.city,\n            state: business.location.state,\n            zipCode: business.location.zip_code,\n            category: business.categories[0].title,\n            rating: business.rating,\n            reviewCount: business.review_count\n          }));\n        }\n      }\n      // If the response is not ok, throw an error\n      throw new Error('Request failed');\n    } catch (error) {\n      // Log the error if something goes wrong during the fetch or processing\n      console.log(error);\n    }\n  }\n};\nexport default Yelp;","map":{"version":3,"names":["Yelp","search","term","location","sortBy","url","response","fetch","headers","Authorization","apiKey","ok","jsonResponse","json","businesses","map","business","id","imageSrc","image_url","name","address","address1","city","state","zipCode","zip_code","category","categories","title","rating","reviewCount","review_count","Error","error","console","log"],"sources":["/Users/senonuzeiroski/Downloads/ravenous-part-one-solution/src/util/Yelp.js"],"sourcesContent":["const Yelp = {\n    // The search method takes term, location, and sortBy as its parameters\n    async search(term, location, sortBy) {\n      // Build the URL using interpolation to include the term, location, and sortBy variables\n      const url = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\n  \n      try {\n        // Make a fetch request to the Yelp API with the constructed URL and the API key in the headers\n        const response = await fetch(url, {\n          headers: {\n            Authorization: `Bearer ${apiKey}`,\n          },\n        });\n  \n        // If the response is ok (HTTP status code is 200), proceed to process the response\n        if (response.ok) {\n          // Convert the response to a JSON object\n          const jsonResponse = await response.json();\n          // Check if the jsonResponse has a businesses property (an array of businesses)\n          if (jsonResponse.businesses) {\n            // Map the jsonResponse.businesses array to a new array with only the required properties\n            return jsonResponse.businesses.map((business) => ({\n              id: business.id,\n              imageSrc: business.image_url,\n              name: business.name,\n              address: business.location.address1,\n              city: business.location.city,\n              state: business.location.state,\n              zipCode: business.location.zip_code,\n              category: business.categories[0].title,\n              rating: business.rating,\n              reviewCount: business.review_count,\n            }));\n          }\n        }\n        // If the response is not ok, throw an error\n        throw new Error('Request failed');\n      } catch (error) {\n        // Log the error if something goes wrong during the fetch or processing\n        console.log(error);\n      }\n    },\n  };\n\n  export default Yelp;\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG;EACT;EACA,MAAMC,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACnC;IACA,MAAMC,GAAG,GAAI,sFAAqFH,IAAK,aAAYC,QAAS,YAAWC,MAAO,EAAC;IAE/I,IAAI;MACF;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAChCG,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,MAAO;QAClC;MACF,CAAC,CAAC;;MAEF;MACA,IAAIJ,QAAQ,CAACK,EAAE,EAAE;QACf;QACA,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;QAC1C;QACA,IAAID,YAAY,CAACE,UAAU,EAAE;UAC3B;UACA,OAAOF,YAAY,CAACE,UAAU,CAACC,GAAG,CAAEC,QAAQ,KAAM;YAChDC,EAAE,EAAED,QAAQ,CAACC,EAAE;YACfC,QAAQ,EAAEF,QAAQ,CAACG,SAAS;YAC5BC,IAAI,EAAEJ,QAAQ,CAACI,IAAI;YACnBC,OAAO,EAAEL,QAAQ,CAACb,QAAQ,CAACmB,QAAQ;YACnCC,IAAI,EAAEP,QAAQ,CAACb,QAAQ,CAACoB,IAAI;YAC5BC,KAAK,EAAER,QAAQ,CAACb,QAAQ,CAACqB,KAAK;YAC9BC,OAAO,EAAET,QAAQ,CAACb,QAAQ,CAACuB,QAAQ;YACnCC,QAAQ,EAAEX,QAAQ,CAACY,UAAU,CAAC,CAAC,CAAC,CAACC,KAAK;YACtCC,MAAM,EAAEd,QAAQ,CAACc,MAAM;YACvBC,WAAW,EAAEf,QAAQ,CAACgB;UACxB,CAAC,CAAC,CAAC;QACL;MACF;MACA;MACA,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF;AACF,CAAC;AAED,eAAelC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}